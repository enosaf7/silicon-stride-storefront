
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://edueauwukpktgihliape.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVkdWVhdXd1a3BrdGdpaGxpYXBlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY5NjU3ODUsImV4cCI6MjA2MjU0MTc4NX0.BqYqTdi12Gt5CtNTVYNHn0cQ9IXdrT0OEfRMAR4Edzo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  realtime: {
    timeout: 30000, // 30 seconds
    params: {
      eventsPerSecond: 10
    }
  }
});

// Extending supabase.rpc with our custom functions to make typescript happy
const originalRpc = supabase.rpc.bind(supabase);
supabase.rpc = (fn: string, ...args: any[]) => {
  // Add type safety for custom RPC functions
  if (fn === 'get_admin_conversations' || 
      fn === 'get_user_messages' || 
      fn === 'get_conversation_messages' || 
      fn === 'mark_messages_as_read' ||
      fn === 'has_role') {
    return originalRpc(fn, ...args);
  }
  return originalRpc(fn, ...args);
};

// Create the message-attachments bucket if it doesn't exist (on app init)
(async () => {
  try {
    // First check if the bucket exists
    const { error: bucketError } = await supabase.storage.getBucket('message-attachments');
    
    // If the bucket doesn't exist, create it
    if (bucketError && bucketError.message.includes('not found')) {
      const { error: createError } = await supabase.storage.createBucket('message-attachments', {
        public: true,
        fileSizeLimit: 20971520, // 20MB,
      });
      
      if (createError) {
        console.error('Error creating storage bucket:', createError);
      } else {
        console.log('Created message-attachments bucket');
      }
    }
  } catch (error) {
    console.error('Error checking/creating storage bucket:', error);
  }
})();
